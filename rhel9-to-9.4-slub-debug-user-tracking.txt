

14 February 2025
Lucas Oakley (stlucas)

This is how to use slub_debug's user-tracking in RHEL 9.0-9.4
This is the U in slub_debug=FZPU.



        [1] How to use slub_debug to troubleshoot and debug slab issues
            https://access.redhat.com/solutions/5577011

    F    Sanity checks checks basic details about slab objects, such as making sure the current amount 
         of objects on a slab is not greater than the maximum amount of objects that slab can hold, or 
         the current amount of used slab objects is not more than the amount of objects on the slab 
         (and various other small checks).

    Z    Red zoning adds a small amount of internal fragmentation to slabs known as "Redzones". These 
         zones have an unlikely value (defined in include/linux/poison.h) written to them and these values 
         are checked for consistency. Useful to detect times where part of a slab is overwritten.

    P    Posioning writes an unlikely "poison" value to a slab object on allocation or freeing a slab 
         object. On allocation, the slab object is "poisoned" with this value until the object is 
         actually stored in the slab. On free, the object is overwritten with the poison value. 
         Useful to detect "use-after-free" situations.

    U    User tracking stores the PID and PID's kernel stack when that PID allocates or frees a slab 
         object in an internal structure. Requires a vmcore to view.



Here is a test system that was booted with `slub_debug=FZPU panic_on_taint=0x20`.


          KERNEL: /cores/retrace/repos/kernel/x86_64/usr/lib/debug/lib/modules/5.14.0-427.13.1.el9_4.x86_64/vmlinux  [TAINTED]
        DUMPFILE: /cores/retrace/tasks/631603860/crash/vmcore  [PARTIAL DUMP]
            CPUS: 4
            DATE: Wed Jul 17 10:43:01 EDT 2024
          UPTIME: 00:00:28
    LOAD AVERAGE: 0.11, 0.03, 0.01
           TASKS: 205
        NODENAME: rhel9x
         RELEASE: 5.14.0-427.13.1.el9_4.x86_64
         VERSION: #1 SMP PREEMPT_DYNAMIC Wed Apr 10 10:29:16 EDT 2024
         MACHINE: x86_64  (3792 Mhz)
          MEMORY: 4 GB
           PANIC: "Kernel panic - not syncing: panic_on_taint set ..."
             PID: 2990
         COMMAND: "sshd"
            TASK: ffff9c12a09147c0  [THREAD_INFO: ffff9c12a09147c0]
             CPU: 1
           STATE: TASK_RUNNING (PANIC)

And here is the faulting address. 

    crash> kmem ffff9c1282f65800
    CACHE             OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE  NAME
    ffff9c12800430c0     1024       1510      1580    158    32k  kmalloc-1k
      SLAB              MEMORY            NODE  TOTAL  ALLOCATED  FREE
      ffffd829c40bd800  ffff9c1282f60000     0     10          9     1
      FREE / [ALLOCATED]
      [ffff9c1282f65400]

          PAGE       PHYSICAL      MAPPING       INDEX CNT FLAGS
    ffffd829c40bd940 102f65000 dead000000000400        0  0 17ffffc0000000

It's from the kmalloc-1k slab cache. 

    crash> struct kmem_cache.name,size,red_left_pad,inuse ffff9c12800430c0
      name = 0xffffffffa534f5b6 "kmalloc-1k",
      size = 0xc00,
      red_left_pad = 0x400,
      inuse = 0x408,

Let's annotate the object. I've skipped the padding at the start of the object. 
If you would like to see how that is annotated, please see the RHEL 9.5 slub debug document.


    crash> rd ffff9c1282f65800 -SS 386 
    ffff9c1282f65800:  0000000000000000 0000000000000000  \
    ................                                      | 0x400 bytes of data cache area
    ffff9c1282f65be0:  0000000000000000 0000000000000000  |
    ffff9c1282f65bf0:  0000000000000000 0000000000000000  /

    ffff9c1282f65c00:  bbbbbbbbbbbbbbbb                   | 0x8 bytes extra padding 
                                        f30639934c627fb4  | 0x8 bytes extra pointer

    ffff9c1282f65c10:  ffffffffc029103b 00000003040400ba  \ struct track for the allocation is now sized at 0x20 bytes
    ffff9c1282f65c20:  0000000000000bd8 00000000fffbdbbb  / 

    ffff9c1282f65c30:  ffffffffc0291061 00000003040900ba  \ struct track for the freeing of the object now sized at 0x20 bytes
    ffff9c1282f65c40:  0000000000000bd8 00000000fffbdbbb  / 

    ffff9c1282f65c50:  5a5a5a5a00000400 5a5a5a5a5a5a5a5a  \ remaining padding 
    ffff9c1282f65c60:  5a5a5a5a5a5a5a5a 5a5a5a5a5a5a5a5a  | to size the object at 0xc00 bytes
    ................                                      |
    ffff9c1282f65fe0:  5a5a5a5a5a5a5a5a 5a5a5a5a5a5a5a5a  /
    ffff9c1282f65ff0:  5a5a5a5a5a5a5a5a 5a5a5a5a5a5a5a5a 

    ffff9c1282f66000:  cccccccccccccccc cccccccccccccccc \
    ffff9c1282f66010:  cccccccccccccccc cccccccccccccccc | start of the next object
    ................                                     |
    ffff9c1282f663f0:  cccccccccccccccc cccccccccccccccc |
    ffff9c1282f66400:  [ffff9c12929d3858:kmalloc-8] [ffff9c1283024c08:kmalloc-1k] 


From the annotation above, we see the struct track of the allocation and freeing paths.
From this we derive the handle. 


    crash> struct track ffff9c1282f65c10 2
    struct track {                            \
      addr = 0xffffffffc029103b,              | 
      handle = 0x40400ba,                     | allocation struct track
      cpu = 0x3,                              |
      pid = 0xbd8,                            |
      when = 0xfffbdbbb                       |
    }                                         /

    struct track {                            \
      addr = 0xffffffffc0291061,              |
      handle = 0x40900ba,                     | freeing struct track
      cpu = 0x3,                              | 
      pid = 0xbd8,                            |
      when = 0xfffbdbbb                       | 
    }                                         /



    crash> struct track ffff9c1282f65c10 -o 2
    struct track {
      [ffff9c1282f65c10] unsigned long addr;
      [ffff9c1282f65c18] depot_stack_handle_t handle;       <--- alloc handle
      [ffff9c1282f65c1c] int cpu;
      [ffff9c1282f65c20] int pid;
      [ffff9c1282f65c28] unsigned long when;
    }
    SIZE: 0x20

    struct track {
      [ffff9c1282f65c30] unsigned long addr;
      [ffff9c1282f65c38] depot_stack_handle_t handle;       <--- free handle
      [ffff9c1282f65c3c] int cpu;
      [ffff9c1282f65c40] int pid;
      [ffff9c1282f65c48] unsigned long when;
    }
    SIZE: 0x20

The handle shows us the stack_slabs list we need to check to find the respective stack_record structures. 

    crash> handle_parts ffff9c1282f65c18   // alloc 
    union handle_parts {
      handle = 0x40400ba,
      {
        slabindex = 0xba,
        offset = 0x4,
        valid = 0x1,
        extra = 0x0
      }
    }

    crash> handle_parts ffff9c1282f65c38  // free
    union handle_parts {
      handle = 0x40900ba,
      {
        slabindex = 0xba,
        offset = 0x9,
        valid = 0x1,
        extra = 0x0
      }
    }


Here is how to find the stack_record structure for the allocation.

    crash> p stack_slabs[0xba]
    $11 = (void *) 0xffff9c1281f4c000

    crash> p 0xffff9c1281f4c000 + (0x4<<4)
    $13 = 0xffff9c1281f4c040

    crash> stack_record 0xffff9c1281f4c040
    struct stack_record {
      next = 0x0,
      hash = 0xa501a463,
      size = 0x7,             // number of functions 
      handle = {  
        handle = 0x40400ba,   // matches the alloc handle above
        {
          slabindex = 0xba,
          offset = 0x4,
          valid = 0x1,
          extra = 0x0
        }
      },
      entries = 0xffff9c1281f4c058
    }

And reading the entries list, we find the actual allocation stack that allocated the object. 

    crash> rd 0xffff9c1281f4c058 -SS 7
    ffff9c1281f4c058:  kmalloc_trace+0x25 ffffffffc029103b 
    ffff9c1281f4c068:  do_one_initcall+0x41 do_init_module+0x5c 
    ffff9c1281f4c078:  __do_sys_finit_module+0xae do_syscall_64+0x59 
    ffff9c1281f4c088:  entry_SYSCALL_64_after_hwframe+0x72 



Here is how to find the freeing stack_record structure for the freeing path.



    crash> p 0xffff9c1281f4c000 + (0x9 <<4)
    $14 = 0xffff9c1281f4c090


    crash> stack_record 0xffff9c1281f4c090
    struct stack_record {
      next = 0x0,
      hash = 0x5f0209f3,
      size = 0x5,
      handle = {
        handle = 0x40900ba,
        {
          slabindex = 0xba,
          offset = 0x9,
          valid = 0x1,
          extra = 0x0
        }
      },
      entries = 0xffff9c1281f4c0a8
    }

And reading the entries list of the freeing path. 

    crash> rd -SS 0xffff9c1281f4c0a8 5
    ffff9c1281f4c0a8:  do_one_initcall+0x41 do_init_module+0x5c 
    ffff9c1281f4c0b8:  __do_sys_finit_module+0xae do_syscall_64+0x59 
    ffff9c1281f4c0c8:  entry_SYSCALL_64_after_hwframe+0x72 



